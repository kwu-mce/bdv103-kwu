/* tslint:disable */
/* eslint-disable */
/**
 * assignment-template
 * This is a template repository for the first assignment in BVD 103 at McMaster Continuing Education.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Book,
  CreateOrUpdateBook200Response,
  Filter,
  FulfilOrderRequest,
  Order,
  PlaceOrderRequest,
} from '../models/index';
import {
    BookFromJSON,
    BookToJSON,
    CreateOrUpdateBook200ResponseFromJSON,
    CreateOrUpdateBook200ResponseToJSON,
    FilterFromJSON,
    FilterToJSON,
    FulfilOrderRequestFromJSON,
    FulfilOrderRequestToJSON,
    OrderFromJSON,
    OrderToJSON,
    PlaceOrderRequestFromJSON,
    PlaceOrderRequestToJSON,
} from '../models/index';

export interface CreateOrUpdateBookRequest {
    book: Book;
}

export interface FulfilOrderOperationRequest {
    order: string;
    fulfilOrderRequest: FulfilOrderRequest;
}

export interface GetBookInfoRequest {
    book: string;
}

export interface ListBooksRequest {
    filter: Array<Filter>;
}

export interface PlaceBooksOnShelfRequest {
    book: string;
    shelf: string;
    number: number;
}

export interface PlaceOrderOperationRequest {
    placeOrderRequest: PlaceOrderRequest;
}

export interface SayHelloRequest {
    name: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createOrUpdateBookRaw(requestParameters: CreateOrUpdateBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOrUpdateBook200Response>> {
        if (requestParameters['book'] == null) {
            throw new runtime.RequiredError(
                'book',
                'Required parameter "book" was null or undefined when calling createOrUpdateBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/books`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookToJSON(requestParameters['book']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOrUpdateBook200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createOrUpdateBook(requestParameters: CreateOrUpdateBookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOrUpdateBook200Response> {
        const response = await this.createOrUpdateBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fulfil an order by taking all the relevant book copies for the order off the shelves
     */
    async fulfilOrderRaw(requestParameters: FulfilOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['order'] == null) {
            throw new runtime.RequiredError(
                'order',
                'Required parameter "order" was null or undefined when calling fulfilOrder().'
            );
        }

        if (requestParameters['fulfilOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'fulfilOrderRequest',
                'Required parameter "fulfilOrderRequest" was null or undefined when calling fulfilOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfil/{order}`.replace(`{${"order"}}`, encodeURIComponent(String(requestParameters['order']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FulfilOrderRequestToJSON(requestParameters['fulfilOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fulfil an order by taking all the relevant book copies for the order off the shelves
     */
    async fulfilOrder(requestParameters: FulfilOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fulfilOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Find the shelves that have copies of the book, and how many copies each shelf has
     */
    async getBookInfoRaw(requestParameters: GetBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        if (requestParameters['book'] == null) {
            throw new runtime.RequiredError(
                'book',
                'Required parameter "book" was null or undefined when calling getBookInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/warehouse/{book}`.replace(`{${"book"}}`, encodeURIComponent(String(requestParameters['book']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Find the shelves that have copies of the book, and how many copies each shelf has
     */
    async getBookInfo(requestParameters: GetBookInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: number; }> {
        const response = await this.getBookInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listBooksRaw(requestParameters: ListBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Book>>> {
        if (requestParameters['filter'] == null) {
            throw new runtime.RequiredError(
                'filter',
                'Required parameter "filter" was null or undefined when calling listBooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/books/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['filter']!.map(FilterToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookFromJSON));
    }

    /**
     */
    async listBooks(requestParameters: ListBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Book>> {
        const response = await this.listBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all the pending orders
     */
    async listOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     * Get all the pending orders
     */
    async listOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>> {
        const response = await this.listOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add copies of a book to a provided shelf
     */
    async placeBooksOnShelfRaw(requestParameters: PlaceBooksOnShelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['book'] == null) {
            throw new runtime.RequiredError(
                'book',
                'Required parameter "book" was null or undefined when calling placeBooksOnShelf().'
            );
        }

        if (requestParameters['shelf'] == null) {
            throw new runtime.RequiredError(
                'shelf',
                'Required parameter "shelf" was null or undefined when calling placeBooksOnShelf().'
            );
        }

        if (requestParameters['number'] == null) {
            throw new runtime.RequiredError(
                'number',
                'Required parameter "number" was null or undefined when calling placeBooksOnShelf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/warehouse/{book}/{shelf}/{number}`.replace(`{${"book"}}`, encodeURIComponent(String(requestParameters['book']))).replace(`{${"shelf"}}`, encodeURIComponent(String(requestParameters['shelf']))).replace(`{${"number"}}`, encodeURIComponent(String(requestParameters['number']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add copies of a book to a provided shelf
     */
    async placeBooksOnShelf(requestParameters: PlaceBooksOnShelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.placeBooksOnShelfRaw(requestParameters, initOverrides);
    }

    /**
     * Place an order
     */
    async placeOrderRaw(requestParameters: PlaceOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['placeOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'placeOrderRequest',
                'Required parameter "placeOrderRequest" was null or undefined when calling placeOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceOrderRequestToJSON(requestParameters['placeOrderRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Place an order
     */
    async placeOrder(requestParameters: PlaceOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.placeOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sayHelloRaw(requestParameters: SayHelloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling sayHello().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hello/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async sayHello(requestParameters: SayHelloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.sayHelloRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
